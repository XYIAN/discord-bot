# XYIAN Discord Bot - Critical Rules & Guidelines

## üö® CRITICAL RULES - NEVER BREAK THESE

### 1. VERSION & CHANGELOG MANAGEMENT
- **ALWAYS** update version in package.json with every commit
- **ALWAYS** update CHANGELOG.md with every commit
- Use semantic versioning: patch (1.2.4 ‚Üí 1.2.5), minor (1.2.4 ‚Üí 1.3.0), major (1.2.4 ‚Üí 2.0.0)
- **NEVER** commit without updating both version and changelog

### 2. CHANNEL RESPONSE LOGIC - CRITICAL
- **ONLY AI CHANNELS** can have live responses without commands: `bot-questions`, `bot-questions-advanced`, `archero-ai`
- **GENERAL CHAT**: Only responds to `!help` and `!menu` - directs to AI channels for questions
- **GUILD RECRUIT**: Completely ignored - only cron jobs allowed
- **ALL OTHER CHANNELS**: Commands only (`!ping`, `!help`, etc.)

### 3. MESSAGE HANDLER STRUCTURE
- **GATE FIRST**: Check channel type before any processing
- **IGNORE LISTS**: Guild recruit and general chat must be filtered
- **SAFETY CHECKS**: Multiple validation layers to prevent unwanted responses
- **NO DUPLICATES**: Response tracking system prevents multiple responses

### 4. COMMIT MESSAGES
- **ALWAYS** include version number in commit message
- **ALWAYS** describe what was fixed/added
- **NEVER** commit broken code - test first
- Format: `"VERSION X.X.X: Description of changes"`

### 5. TESTING BEFORE PUSH
- **ALWAYS** run `node -c ultimate-xyian-bot.js` before committing
- **ALWAYS** test locally if possible
- **NEVER** push broken code to production

### 6. CHANNEL-SPECIFIC BEHAVIOR
- **AI Channels**: Live responses to plain text questions
- **General Chat**: Only `!help` and `!menu` commands
- **Guild Recruit**: Completely silent except cron jobs
- **DMs**: Full functionality (commands + Q&A)
- **All Others**: Commands only

### 7. ERROR PREVENTION
- **Multiple Safety Checks**: Gate, ignore lists, final validation
- **Clear Logging**: Log all ignored channels and failed checks
- **No Assumptions**: Always verify channel permissions
- **Clean Separation**: Different handlers for different message types

## üîß DEVELOPMENT WORKFLOW

1. **Make Changes**
2. **Test Syntax**: `node -c ultimate-xyian-bot.js`
3. **Update Version**: package.json
4. **Update Changelog**: CHANGELOG.md
5. **Commit**: `git add . && git commit -m "VERSION X.X.X: Description"`
6. **Push**: `git push`

## üìã CHANNEL RULES SUMMARY

| Channel Type | Live Responses | Commands | Notes |
|-------------|----------------|----------|-------|
| AI Channels | ‚úÖ Yes | ‚úÖ Yes | bot-questions, archero-ai |
| General Chat | ‚ùå No | ‚úÖ !help, !menu only | Direct to AI channels |
| Guild Recruit | ‚ùå No | ‚ùå No | Cron jobs only |
| DMs | ‚úÖ Yes | ‚úÖ Yes | Full functionality |
| All Others | ‚ùå No | ‚úÖ Yes | Commands only |

## üö® NEVER DO THESE
- Don't respond to casual conversation in non-AI channels
- Don't ignore version updates
- Don't commit without testing
- Don't break the channel response logic
- Don't create duplicate responses
- Don't forget to update changelog

## ‚úÖ ALWAYS DO THESE
- Update version and changelog with every commit
- Test syntax before pushing
- Use proper commit message format
- Respect channel-specific behavior
- Add safety checks for critical features
- Log ignored channels clearly
